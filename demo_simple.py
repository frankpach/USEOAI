#!/usr/bin/env python3
"""
Simple demonstration of the new dynamic performance analysis functionality.
"""

import asyncio
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.services.seo_analyzer import SEOAnalyzer


def demo_request_processing():
    """Demonstrate the request processing functionality"""
    print("üîç DYNAMIC REQUEST PROCESSING DEMO")
    print("="*50)
    
    analyzer = SEOAnalyzer()
    
    # Example network requests that would be captured by the browser
    mock_requests = [
        {'url': 'https://example.com', 'resourceType': 'document', 'method': 'GET'},
        {'url': 'https://example.com/app.js', 'resourceType': 'script', 'method': 'GET'},
        {'url': 'https://example.com/utils.js', 'resourceType': 'script', 'method': 'GET'},
        {'url': 'https://example.com/analytics.js', 'resourceType': 'script', 'method': 'GET'},
        {'url': 'https://example.com/styles.css', 'resourceType': 'stylesheet', 'method': 'GET'},
        {'url': 'https://example.com/theme.css', 'resourceType': 'stylesheet', 'method': 'GET'},
        {'url': 'https://example.com/logo.png', 'resourceType': 'image', 'method': 'GET'},
        {'url': 'https://example.com/banner.jpg', 'resourceType': 'image', 'method': 'GET'},
        {'url': 'https://example.com/gallery-1.jpg', 'resourceType': 'image', 'method': 'GET'},
        {'url': 'https://example.com/gallery-2.jpg', 'resourceType': 'image', 'method': 'GET'},
        {'url': 'https://example.com/font.woff2', 'resourceType': 'font', 'method': 'GET'},
        {'url': 'https://example.com/font-bold.woff2', 'resourceType': 'font', 'method': 'GET'},
        {'url': 'https://api.example.com/user', 'resourceType': 'fetch', 'method': 'GET'},
        {'url': 'https://api.example.com/products', 'resourceType': 'xhr', 'method': 'GET'},
        {'url': 'https://analytics.example.com/track', 'resourceType': 'fetch', 'method': 'POST'},
    ]
    
    print("üì° Network Requests Captured by Browser:")
    for i, req in enumerate(mock_requests, 1):
        print(f"   {i:2d}. {req['resourceType']:10} - {req['url']}")
    
    # Process the requests
    result = analyzer._process_dynamic_requests(mock_requests)
    
    print(f"\nüìä Processing Results:")
    print(f"   Total Resources: {result['total_count']} (excluding document)")
    print(f"   Scripts: {result['scripts']}")
    print(f"   Stylesheets: {result['stylesheets']}")
    print(f"   Images: {result['images']}")
    print(f"   Fonts: {result['fonts']}")
    print(f"   Fetch/XHR: {result['fetch_requests']}")
    
    print(f"\nüìà Breakdown by Type:")
    for resource_type, count in result['by_type'].items():
        print(f"   {resource_type}: {count}")
    
    return result


def demonstrate_static_vs_dynamic():
    """Show the difference between static and dynamic analysis"""
    print("\nüìä STATIC vs DYNAMIC ANALYSIS COMPARISON")
    print("="*60)
    
    # What static analysis would find in this HTML
    html_content = """
    <html>
        <head>
            <script src="app.js"></script>
            <link rel="stylesheet" href="styles.css">
        </head>
        <body>
            <img src="logo.png" alt="Logo">
            <img src="banner.jpg" alt="Banner" loading="lazy">
        </body>
    </html>
    """
    
    print("üìÑ Initial HTML Content:")
    print("   ‚Ä¢ 1 JavaScript file (app.js)")
    print("   ‚Ä¢ 1 CSS file (styles.css)")
    print("   ‚Ä¢ 2 images (logo.png, banner.jpg)")
    print("   ‚Ä¢ Total visible in HTML: 4 resources")
    
    print("\nüîç Static Analysis Results:")
    print("   ‚Ä¢ Scripts: 1")
    print("   ‚Ä¢ Stylesheets: 1")
    print("   ‚Ä¢ Images: 2")
    print("   ‚Ä¢ Fonts: 0")
    print("   ‚Ä¢ Fetch/XHR: 0")
    print("   ‚Ä¢ Total: 4 resources")
    
    print("\nüöÄ Dynamic Analysis Results (from demo above):")
    result = demo_request_processing()
    print(f"   ‚Ä¢ Scripts: {result['scripts']}")
    print(f"   ‚Ä¢ Stylesheets: {result['stylesheets']}")
    print(f"   ‚Ä¢ Images: {result['images']}")
    print(f"   ‚Ä¢ Fonts: {result['fonts']}")
    print(f"   ‚Ä¢ Fetch/XHR: {result['fetch_requests']}")
    print(f"   ‚Ä¢ Total: {result['total_count']} resources")
    
    print(f"\nüìà Improvement:")
    print(f"   ‚Ä¢ Dynamic analysis found {result['total_count']/4:.1f}x more resources")
    print(f"   ‚Ä¢ Captured {result['scripts']} scripts vs 1 in HTML")
    print(f"   ‚Ä¢ Detected {result['fetch_requests']} API calls (invisible to static)")
    print(f"   ‚Ä¢ Found {result['fonts']} fonts (loaded by CSS)")


async def demonstrate_fallback():
    """Show how the fallback mechanism works"""
    print("\nüîÑ FALLBACK MECHANISM DEMO")
    print("="*40)
    
    analyzer = SEOAnalyzer()
    
    # Test the default metrics
    default_metrics = analyzer._get_default_performance_metrics()
    
    print("üõ°Ô∏è  Default Performance Metrics (when all analysis fails):")
    print(f"   ‚Ä¢ TTFB: {default_metrics['ttfb_ms']}ms")
    print(f"   ‚Ä¢ Resource Count: {default_metrics['resource_count']}")
    print(f"   ‚Ä¢ Gzip Enabled: {default_metrics['gzip_enabled']}")
    print(f"   ‚Ä¢ Lazy Loading: {default_metrics['lazy_loaded_images']}")
    print(f"   ‚Ä¢ Scripts: {default_metrics['scripts_count']}")
    print(f"   ‚Ä¢ Images: {default_metrics['images_count']}")
    print(f"   ‚Ä¢ Stylesheets: {default_metrics['stylesheets_count']}")
    print(f"   ‚Ä¢ Fonts: {default_metrics['fonts_count']}")
    print(f"   ‚Ä¢ Fetch/XHR: {default_metrics['fetch_requests_count']}")
    print(f"   ‚Ä¢ Total Requests: {default_metrics['total_requests']}")
    
    print(f"\n‚úÖ All required fields are present for backward compatibility")


def main():
    """Main demonstration function"""
    print("üéØ DYNAMIC PERFORMANCE ANALYSIS - FEATURE DEMO")
    print("="*70)
    print("This demo shows the new dynamic resource counting capabilities")
    print("that capture JavaScript-loaded resources for accurate analysis.")
    print("="*70)
    
    try:
        # Demo the request processing
        demo_request_processing()
        
        # Show the comparison
        demonstrate_static_vs_dynamic()
        
        # Show fallback mechanism
        asyncio.run(demonstrate_fallback())
        
        print(f"\nüéâ FEATURE SUMMARY")
        print("="*50)
        print("‚úÖ Dynamic browser-based resource counting implemented")
        print("‚úÖ Captures resources loaded via JavaScript")
        print("‚úÖ Processes all network requests by type")
        print("‚úÖ Provides detailed resource breakdown")
        print("‚úÖ Falls back to static analysis when browser unavailable")
        print("‚úÖ Maintains backward compatibility")
        print("‚úÖ Adds comprehensive metrics for modern web apps")
        
        print(f"\nüìö Key Benefits:")
        print("   ‚Ä¢ Accurate resource counting for modern websites")
        print("   ‚Ä¢ Detects dynamically loaded content")
        print("   ‚Ä¢ Captures API calls and background requests")
        print("   ‚Ä¢ Better performance insights for SEO")
        print("   ‚Ä¢ Realistic loading time analysis")
        
        print(f"\nüîß Technical Implementation:")
        print("   ‚Ä¢ Uses existing browser pool infrastructure")
        print("   ‚Ä¢ Intercepts network requests via pyppeteer")
        print("   ‚Ä¢ Categorizes resources by type automatically")
        print("   ‚Ä¢ Graceful fallback to static HTML analysis")
        print("   ‚Ä¢ Thread-safe and async-compatible")
        
    except Exception as e:
        print(f"\n‚ùå Error during demonstration: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()